snippet def
	(def ${0})
snippet cl
	(js/console.log ${1})
snippet defm
	(defmethod ${1} ${2} [${3}]
		${0})
snippet defmm
	(defmulti ${1} ${0})
snippet defma
	(defmacro ${1} [${2}]
	  ${0})
snippet defn
	(defn ${1} [${2}]
		${0})
snippet defn-
	(defn- ${1} [${2}]
		${0})
snippet defp
	(defprotocol ${1}
		${0})
snippet defr
	(defrecord ${1} [${2}]
		${3}
		${0})
snippet deft
	(deftest ${1}
		(is (= ${0})))
snippet is
	(is (= ${1} ${0}))
snippet defty
	(deftype ${1} [${2}]
		${3}
		${0})
snippet doseq
	(doseq [${1} ${2}]
		${0})
snippet fn
	(fn [${1}] ${0})
snippet if
	(if ${1}
		${2}
		${0})
snippet if-let
	(if-let [${1} ${2}]
		(${3} $1)
		(${0}))
snippet imp
	(:import [${1:package}])
		& {:keys [${1:keys}] :or {${0:defaults}}}
snippet let
	(let [${1} ${2}]
		${0})
snippet letfn
	(letfn [(${1:name}) [${2:args}]
		${0})])
snippet map
	(map ${1} ${0})
snippet mapl
	(map #(${1}) ${0})
snippet met
	(${1:name} [${2:this} ${3:args}]
		${0})
snippet ns
	(ns ${0})
snippet dotimes
	(dotimes [_ 10]
		(time
			(dotimes [_ ${1:times}]
				${0})))
snippet pmethod
	(${1:name} [${2:this} ${0:args}])
snippet refer
	(:refer-clojure :exclude [${0}])
snippet req
	(:require [${1} :as ${0}])
snippet print
	(println ${0})
snippet reduce
	(reduce ${3:(fn [p n] ${4})}$2 ${1})
snippet when
	(when ${1} ${0})
snippet when-let
	(when-let [${1} ${2}]
		${0})
